# include<bits/stdc++.h>
using namespace std;

struct Point{
  int x,y;
};

int orientation(Point p,Point q,Point r){
  int ans=(q.y-p.y)*(r.x-q.x)-(r.y-q.y)*(q.x-p.x);
  if(ans==0)
  return 0;
  return(ans>0)?1:2;
}

void convexHull(Point pts[],int n){
  int left=0;
  for(int i=1;i<n;i++){
    if(pts[left].x>pts[i].x)
    left=i;
  }

vector<Point> hull;
int p=left,q;
do{
hull.push_back(pts[p]);
q=(p+1)%n;
for(int i=0;i<n;i++){
  if(orientation(pts[p],pts[i],pts[q])==2)
  q=i;
}
p=q;
}
while(p!=left);

cout<<hull.size()<<"\n";
for(auto i:hull)
cout<<i.x<<" "<<i.y<<"\n";
}

int main(){

  #ifndef ONLINE_JUDGE

    // For getting input from input.txt file
    freopen("practice_in.txt", "r", stdin);

    // Printing the Output to output.txt file
    freopen("practice_out.txt", "w", stdout);

#endif
  int n;
  cin>>n;
  Point pts[n];
  for(int i=0;i<n;i++){
    int x,y;
    cin>>x>>y;
    pts[i]={x,y};
  }
  convexHull(pts,n);
  return 0;
}
