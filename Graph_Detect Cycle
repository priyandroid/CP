# include<bits/stdc++.h>
using namespace std;

       
  class Graph{
      bool DFSUtil(int v);
      public:
      map<int,bool> visited;
      map<int,vector<int>> adj;
      map<int,bool> rec_stack;
      void addEdge(int u,int v);
      bool isCycle();
  } ;
  void Graph::addEdge(int u,int v){
      adj[u].push_back(v);
  }
  bool Graph::DFSUtil(int v){
      if(visited[v]==false){
      visited[v]=true;
      rec_stack[v]=true;
      for(auto it=adj[v].begin();it!=adj[v].end();it++){
          if(visited[*it]==false){
              if(DFSUtil(*it)){
              return true;}
          }
          else if(rec_stack[*it])
          return true;
      }
      }
    rec_stack[v]=false;
      return false;
  }
  bool Graph::isCycle(){
      for(auto it:adj){
      if(visited[it.first]==false)
      if(DFSUtil(it.first))return true;
    
      }
     return false;
  }
  
    signed main(){
      
    Graph g;
    g.addEdge(1,2);
    g.addEdge(3,1);
    g.addEdge(2,3);
    g.addEdge(3,4);
    g.addEdge(4,5);
   
    
    if(g.isCycle())cout<<"Cycle Detected";
    else cout<<"Cycle Not Detected";
    return 0;
    }
