#include<bits/stdc++.h>
using namespace std;

struct Node
{
  int val;
  Node *next;
    Node (int val)
  {
    this->val = val;
    next = NULL;
  }
};


void
insert (Node ** head, int val)
{
  Node *cur = new Node (val);
  if (*head == NULL)
    {
      *head = cur;

    }
  else
    {
      Node *temp = *head;
      while (temp->next != NULL)
	{
	  temp = temp->next;
	}
      temp->next = cur;
    }

}

void
split (Node * head, Node ** a, Node ** b)
{

  Node *slow = head, *fast = head->next;
  while (fast != NULL)
    {
      fast = fast->next;
      if (fast != NULL)
	{
	  slow = slow->next;
	  fast = fast->next;
	}
    }

  *a = head;
  *b = slow->next;
  slow->next = NULL;

}

Node *
merge (Node * a, Node * b)
{
  Node *c = NULL;
  while (a != NULL && b != NULL)
    {
      if (a->val <= b->val)
	{
	  insert (&c, a->val);

	  a = a->next;
	}
      else
	{
	  insert (&c, b->val);
	  b = b->next;
	}

    }

  while (a != NULL)
    {
      insert (&c, a->val);
      a = a->next;

    }

  while (b != NULL)
    {
      insert (&c, b->val);
      b = b->next;

    }
  return c;
}


void
mergeSort (Node ** head)
{
  Node *temp = *head;
  Node *a = NULL, *b = NULL;
  if (*head == NULL || (*head)->next == NULL)
    return;

  split (temp, &a, &b);

  mergeSort (&a);
  mergeSort (&b);

  *head = merge (a, b);

}

Node *
Union (Node * a, Node * b)
{
  Node *c = NULL;
  Node *temp = a;

  while (b != NULL && a != NULL)
    {
      if (a->val == b->val)
	{
	  insert (&c, a->val);
	  a = a->next;
	  b = b->next;

	}
      else if (a->val < b->val)
	{
	  insert (&c, a->val);
	  a = a->next;
	}

      else
	{
	  insert (&c, b->val);
	  b = b->next;
	}
    }

  while (a != NULL)
    {
      insert (&c, a->val);
      a = a->next;
    }

  while (b != NULL)
    {
      insert (&c, b->val);
      b = b->next;
    }
  return c;

}

Node *
Intersect (Node * head1, Node * head2)
{
  Node *head3 = NULL;
  while (head1 != NULL && head2 != NULL)
    {
      if (head1->val == head2->val)
	{
	  insert (&head3, head1->val);
	  head1 = head1->next;
	  head2 = head2->next;
	}
      else if (head1->val > head2->val)
	head2 = head2->next;
      else
	head1 = head1->next;
    }
  return head3;
}

void
print (Node * head)
{
  while (head != NULL)
    {
      cout << head->val << " ";
      head = head->next;
    }
  cout << "\n";
}

int
main ()
{
  Node *a = NULL, *b = NULL;
  insert (&a, 1);
  insert (&a, 5);
  insert (&a, 3);
  insert (&a, 2);
  insert (&a, 4);

  insert (&b, 2);
  insert (&b, 13);
  insert (&b, 9);
  insert (&b, 11);
  insert (&b, 5);

  print (a);
  print (b);
  mergeSort (&a);
  mergeSort (&b);
  print (a);
  print (b);
  Node *c = NULL, *d = NULL;
  c = Union (a, b);
  d = Intersect (a, b);
  print (c);
  print (d);
}
