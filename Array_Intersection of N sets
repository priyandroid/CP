# include<bits/stdc++.h>
using namespace std;
void intersection(vector<vector<int>> &sets){
    int n=sets.size(),small=INT_MAX,small_ind;
    for(int i=0;i<n;i++){
    sort(sets[i].begin(),sets[i].end());
    if(sets[i].size()<small){
        small=sets[i].size();
        small_ind=i;
    }
    }
vector<int> intersect;
    for(int i=0;i<small;i++){
        int ele=sets[small_ind][i];
        auto l= lower_bound(sets[small_ind].begin(),sets[small_ind].end(),ele)-sets[small_ind].begin();
         auto r= upper_bound(sets[small_ind].begin(),sets[small_ind].end(),ele)-sets[small_ind].begin();
         int freq=r-l;
         int found=1;

        for(int j=0;j<n;j++){

            if(binary_search(sets[j].begin(),sets[j].end(),ele)){
                auto l= lower_bound(sets[j].begin(),sets[j].end(),ele)-sets[j].begin();
                auto r= upper_bound(sets[j].begin(),sets[j].end(),ele)-sets[j].begin();
               if(freq>r-l){
                   freq=r-l;
               }

            }
            else {
            found=0;
            break;
            }

        }

        if(found==1){
            for(int k=0;k<freq;k++)
            intersect.push_back(ele);
        }
    }

    for(int i=0;i<intersect.size();i++)
    cout<<intersect[i]<<" ";
}
   
void Test_case(){
    int n;
    cin>>n;
    vector<vector<int>> a(n);
    for(int i=0;i<n;i++){
        int m;
        cin>>m;
        vector<int> v(m);
        for(int j=0;j<m;j++)
        cin>>v[i];
        
        a.push_back(v);
    }
    intersection(a);
}
int main(){

    #ifndef ONLINE_JUDGE 
  
    // For getting input from input.txt file 
    freopen("practice_in.txt", "r", stdin); 
  
    // Printing the Output to output.txt file 
    freopen("practice_out.txt", "w", stdout); 
  
#endif 
    Test_case();
    return 0;
       }
