# include<bits/stdc++.h>
using namespace std;
# define V 9
int minDistance(int dist[],bool incset[]){
    int res=INT_MAX,index;
    for(int i=0;i<V;i++){
        if(incset[i]==false )
        if(dist[i]<=res){
            res=dist[i];
            index=i;
    }
    }
    return index;
}
void Dijkstra(int graph[V][V],int src){
    int dist[V];
    bool incset[V];
    for(int i=0;i<V;i++){
        dist[i]=INT_MAX;
        incset[i]=false;
    }
    dist[src]=0;


for(int j=0;j<V;j++){

int u=minDistance(dist,incset);
incset[u]=true;
for(int i=0;i<V;i++){
    if(dist[u]!=INT_MAX && graph[u][i] && !incset[i]&& dist[u]+graph[u][i]<dist[i] )
    dist[i]= dist[u]+graph[u][i];
}
}

for(int i=0;i<V;i++)
cout<<i<<" "<<dist[i]<<"\n";

}
int main(){
   
       int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
  
    Dijkstra(graph, 0);
       return 0;
}
