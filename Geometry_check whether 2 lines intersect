#include <bits/stdc++.h>

using namespace std;
struct Point{
    int x,y;
};
bool lieson(Point p,Point q,Point r){
    if(r.x>min(p.x,q.x) && r.x<max(p.x,q.x) && r.y>min(p.y,q.y) && r.y<max(p.y,q.y))
    return true;
    return false;
}
int orientation(Point p1,Point p2, Point p3){
    int ans=((p2.y-p1.y)*(p3.x-p2.x))-((p3.y-p2.y)*(p2.x-p1.x));
    if(ans==0)
    return 0;
    return(ans>0)?1:2;
}

bool doIntersect(Point p1,Point q1,Point p2,Point q2){
    int o1=orientation(p1,q1,p2);
    int o2=orientation(p1,q1,q2);
    int o3=orientation(p2,q2,p1);
    int o4=orientation(p2,q2,q1);
    if(o1!=o2 && o3!=o4)
    return true;
    if(o1==0 && lieson(p1,q1,p2))return true;
    if(o2==0 && lieson(p1,q1,q2))return true;
    if(o3==0 && lieson(p2,q2,p1))return true;
    if(o4==0 && lieson(p2,q2,q1))return true;

return false;
}
int main()
{
 struct Point p1 = {1, 1}, q1 = {10, 1};
    struct Point p2 = {1, 2}, q2 = {10, 2};
  
    doIntersect(p1, q1, p2, q2)? cout << "Yes\n": cout << "No\n";
  
    p1 = {10, 0}, q1 = {0, 10};
    p2 = {0, 0}, q2 = {10, 10};
    doIntersect(p1, q1, p2, q2)? cout << "Yes\n": cout << "No\n";
  
    p1 = {-5, -5}, q1 = {0, 0};
    p2 = {1, 1}, q2 = {10, 10};
    doIntersect(p1, q1, p2, q2)? cout << "Yes\n": cout << "No\n";
  
    return 0;   
    
    
    
}
