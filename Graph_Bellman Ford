# include<bits/stdc++.h>
using namespace std;
struct Edge{
    int src,dest,wt;
    
};
struct Graph{
    int V, E;
    Edge* edge;
};
Graph* createGraph(int V,int E){
Graph* graph= new Graph();
graph->V=V;
graph->E=E;
graph->edge= new Edge[E];
return graph;
}

void BellmanFord(Graph* graph,int src){
    int V= graph->V;
    int E= graph->E;
    int dist[V];

    for(int i=0;i<V;i++)
    dist[i] = INT_MAX;
    dist[src] =0;

    for(int i=0;i<V;i++)
    for(int j=0;j<E;j++){
        int u= graph->edge[j].src;
        int v= graph->edge[j].dest;
        int wt=graph->edge[j].wt;
        if(dist[u]!=INT_MAX && dist[u]+wt<dist[v])
        dist[v]=dist[u] +wt;
    }

    for(int i=0;i<E;i++){
        int u= graph->edge[i].src;
        int v= graph->edge[i].dest;
        int wt=graph->edge[i].wt;
        if(dist[u]!=INT_MAX && dist[u]+wt<dist[v]){
        cout<<"Graph contains negative wt cycle";
        return;
        }
    }

    for(int i=0;i<V;i++)
    cout<<i<<" "<<dist[i]<<"\n";
}
int main(){

int V = 5; 
    int E = 8; 
    Graph* graph = createGraph(V, E);
  
    
    graph->edge[0].src = 0;
    graph->edge[0].dest = 1;
    graph->edge[0].wt = -1;
  
    
    graph->edge[1].src = 0;
    graph->edge[1].dest = 2;
    graph->edge[1].wt = 4;
  
    
    graph->edge[2].src = 1;
    graph->edge[2].dest = 2;
    graph->edge[2].wt = 3;
  
    graph->edge[3].src = 1;
    graph->edge[3].dest = 3;
    graph->edge[3].wt = 2;
  
    
    graph->edge[4].src = 1;
    graph->edge[4].dest = 4;
    graph->edge[4].wt = 2;
  
    
    graph->edge[5].src = 3;
    graph->edge[5].dest = 2;
    graph->edge[5].wt = 5;
  
    graph->edge[6].src = 3;
    graph->edge[6].dest = 1;
    graph->edge[6].wt = 1;
  
   
    graph->edge[7].src = 4;
    graph->edge[7].dest = 3;
    graph->edge[7].wt = -3;
  
    BellmanFord(graph, 0);
  
    return 0;
}
