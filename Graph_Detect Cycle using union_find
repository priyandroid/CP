# include<bits/stdc++.h>
using namespace std;
struct Edge{
    int src,dest;
};
struct Graph{
    int E,V;
    Edge* edge;
};
Graph* createGraph(int v,int e){
    Graph *graph=new Graph();
    graph->E=e;
    graph->V=v;
    graph->edge =new Edge[e];
    return graph;
}
void Union(int parent[],int x,int y){
    parent[x]=y;
}
int find(int parent[],int i){
    if(parent[i]==-1)
    return 1;
    find(parent,parent[i]);

}
bool iscycle(Graph* graph){
    int parent[graph->V];
    memset(parent,-1,sizeof parent);
    for(int i=0;i<graph->E;i++){
        int x=find(parent,x);
        int y=find(parent,y);
        if(x==y)
        return true;
        Union(parent,x,y);
    }
    return false;
}

int main(){
int V = 3, E = 3;
    Graph* graph = createGraph(V, E);
 
    // add edge 0-1
    graph->edge[0].src = 0;
    graph->edge[0].dest = 1;
 
    // add edge 1-2
    graph->edge[1].src = 1;
    graph->edge[1].dest = 2;
 
    // add edge 0-2
    graph->edge[2].src = 0;
    graph->edge[2].dest = 2;
 
    if (iscycle(graph))
        cout << "graph contains cycle";
    else
        cout << "graph doesn't contain cycle";
 
    return 0;
}
